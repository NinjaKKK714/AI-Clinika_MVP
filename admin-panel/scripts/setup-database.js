// –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL
const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
const config = {
    host: process.env.DB_HOST || 'localhost',
    port: process.env.DB_PORT || 5432,
    user: process.env.DB_USER || 'postgres',
    password: process.env.DB_PASSWORD || 'your_password',
    database: 'postgres' // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
};

async function setupDatabase() {
    const pool = new Pool(config);
    
    try {
        console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        const client = await pool.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ');
        
        // –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const dbName = process.env.DB_NAME || 'ai_clinika';
        console.log(`üìä –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö "${dbName}"...`);
        
        try {
            await client.query(`CREATE DATABASE ${dbName}`);
            console.log(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö "${dbName}" —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
        } catch (err) {
            if (err.code === '42P04') {
                console.log(`‚ÑπÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö "${dbName}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
            } else {
                throw err;
            }
        }
        
        client.release();
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const dbConfig = { ...config, database: dbName };
        const dbPool = new Pool(dbConfig);
        const dbClient = await dbPool.connect();
        
        console.log(`üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö "${dbName}"...`);
        
        // –ß–∏—Ç–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º SQL —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        const createTablesPath = path.join(__dirname, '../sql/01_create_tables.sql');
        if (fs.existsSync(createTablesPath)) {
            console.log('üìã –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü...');
            const createTablesSQL = fs.readFileSync(createTablesPath, 'utf8');
            await dbClient.query(createTablesSQL);
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
        } else {
            console.log('‚ö†Ô∏è  –§–∞–π–ª —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        dbClient.release();
        await dbPool.end();
        
        console.log('üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
        process.exit(1);
    } finally {
        await pool.end();
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    setupDatabase();
}

module.exports = setupDatabase;




